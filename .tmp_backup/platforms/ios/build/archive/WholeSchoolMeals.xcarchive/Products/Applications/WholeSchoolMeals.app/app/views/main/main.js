"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var frame_1 = require("ui/frame");
var platform_1 = require("platform");
var firebase = require("nativescript-plugin-firebase");
function onLoaded(args) {
    if (platform_1.isIOS) {
        var navigationBar = frame_1.topmost().ios.controller.navigationBar;
        navigationBar.barStyle = 1 /* Black */;
    }
    // Initialize firebase (Notifications)
    firebase.init({
        onPushTokenReceivedCallback: function (token) {
            console.log("Firebase push token: " + token);
        },
        onMessageReceivedCallback: function (message) {
            console.log("--- message received: " + JSON.stringify(message));
            setTimeout(function () {
                alert({
                    title: (message.title !== undefined ? message.title : ""),
                    message: (message.body !== undefined ? message.body : ""),
                    okButtonText: "Okay"
                });
            }, 3000);
        }
    }).then(function (instance) {
        console.log("firebase.init done");
    }, function (error) {
        console.log("firebase.init error: " + error);
    });
}
exports.onLoaded = onLoaded;
function openDrawer() {
    var drawer = (frame_1.topmost().getViewById("settings-menu"));
    drawer.gesturesEnabled = true;
    drawer.showDrawer();
}
exports.openDrawer = openDrawer;
function drawerClosed(args) {
    var drawer = args.object;
    drawer.gesturesEnabled = false;
}
exports.drawerClosed = drawerClosed;
function drawerLoaded(args) {
    var drawer = args.object;
    drawer.gesturesEnabled = false;
    if (!drawer.autoCloseAssigned) {
        drawer.autoCloseAssigned = true;
        drawer.page.on("navigatedFrom", function (args) {
            drawer.closeDrawer();
        });
        if (drawer.ios) {
            drawer.ios.defaultSideDrawer.style.shadowMode = 2;
            drawer.ios.defaultSideDrawer.style.dimOpacity = 0.12;
            drawer.ios.defaultSideDrawer.style.shadowOpacity = 0.75;
            drawer.ios.defaultSideDrawer.style.shadowRadius = 5;
            drawer.ios.defaultSideDrawer.transitionDuration = 0.25;
        }
    }
}
exports.drawerLoaded = drawerLoaded;
function schoolsTap() {
    var navigationEntry = {
        moduleName: "views/schools/schools",
        context: { settings: true },
        animated: false
    };
    frame_1.topmost().navigate(navigationEntry);
}
exports.schoolsTap = schoolsTap;
function allergensTap() {
    var navigationEntry = {
        moduleName: "views/allergens/allergens",
        context: { settings: true },
        animated: false
    };
    frame_1.topmost().navigate(navigationEntry);
}
exports.allergensTap = allergensTap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxrQ0FBbUM7QUFDbkMscUNBQXdEO0FBRXhELHVEQUEwRDtBQUUxRCxrQkFBeUIsSUFBZTtJQUNwQyxFQUFFLENBQUMsQ0FBQyxnQkFBSyxDQUFDLENBQUMsQ0FBQztRQUNSLElBQUksYUFBYSxHQUFHLGVBQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQzNELGFBQWEsQ0FBQyxRQUFRLEdBQUcsYUFBZ0IsQ0FBQztJQUM5QyxDQUFDO0lBRUQsc0NBQXNDO0lBQ3RDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDViwyQkFBMkIsRUFBRSxVQUFBLEtBQUs7WUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUNqRCxDQUFDO1FBQ0QseUJBQXlCLEVBQUUsVUFBQyxPQUF5QjtZQUNqRCxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNoRSxVQUFVLENBQUM7Z0JBQ1AsS0FBSyxDQUFDO29CQUNGLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUssU0FBUyxHQUFHLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO29CQUN6RCxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLFNBQVMsR0FBRyxPQUFPLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztvQkFDekQsWUFBWSxFQUFFLE1BQU07aUJBQ3ZCLENBQUMsQ0FBQztZQUNQLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqQixDQUFDO0tBQUMsQ0FBQyxDQUFDLElBQUksQ0FDSixVQUFDLFFBQVE7UUFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDMUMsQ0FBQyxFQUNHLFVBQUMsS0FBSztRQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBM0JELDRCQTJCQztBQUVEO0lBQ0ksSUFBSSxNQUFNLEdBQWlDLENBQUMsZUFBTyxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFDcEYsTUFBTSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDOUIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3hCLENBQUM7QUFKRCxnQ0FJQztBQUVELHNCQUE2QixJQUFJO0lBQzdCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDekIsTUFBTSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7QUFDbkMsQ0FBQztBQUhELG9DQUdDO0FBRUQsc0JBQTZCLElBQUk7SUFDaEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN0QixNQUFNLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztJQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztRQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsVUFBQyxJQUFJO1lBQ3BDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLE1BQU0sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUE7WUFDakQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztZQUM1QyxNQUFNLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1lBQ3hELE1BQU0sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7WUFDcEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDakUsQ0FBQztJQUNGLENBQUM7QUFDRixDQUFDO0FBakJELG9DQWlCQztBQUVEO0lBQ0ksSUFBSSxlQUFlLEdBQUc7UUFDbEIsVUFBVSxFQUFFLHVCQUF1QjtRQUNuQyxPQUFPLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO1FBQzNCLFFBQVEsRUFBRSxLQUFLO0tBQ2xCLENBQUM7SUFDRixlQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQVBELGdDQU9DO0FBRUQ7SUFDSSxJQUFJLGVBQWUsR0FBRztRQUNsQixVQUFVLEVBQUUsMkJBQTJCO1FBQ3ZDLE9BQU8sRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7UUFDM0IsUUFBUSxFQUFFLEtBQUs7S0FDbEIsQ0FBQztJQUNGLGVBQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBUEQsb0NBT0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudERhdGEgfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlXCI7XG5pbXBvcnQgeyBoYXNLZXkgfSBmcm9tIFwiYXBwbGljYXRpb24tc2V0dGluZ3NcIjtcbmltcG9ydCB7IHRvcG1vc3QgfSBmcm9tIFwidWkvZnJhbWVcIjtcbmltcG9ydCB7IGlzSU9TLCBkZXZpY2UsIHBsYXRmb3JtTmFtZXMgfSBmcm9tIFwicGxhdGZvcm1cIjtcbmltcG9ydCB7IFJhZFNpZGVEcmF3ZXIgfSBmcm9tIFwibmF0aXZlc2NyaXB0LXRlbGVyaWstdWkvc2lkZWRyYXdlclwiO1xuaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxvYWRlZChhcmdzOiBFdmVudERhdGEpIHsgICBcbiAgICBpZiAoaXNJT1MpIHtcbiAgICAgICAgbGV0IG5hdmlnYXRpb25CYXIgPSB0b3Btb3N0KCkuaW9zLmNvbnRyb2xsZXIubmF2aWdhdGlvbkJhcjtcbiAgICAgICAgbmF2aWdhdGlvbkJhci5iYXJTdHlsZSA9IFVJQmFyU3R5bGUuQmxhY2s7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBmaXJlYmFzZSAoTm90aWZpY2F0aW9ucylcbiAgICBmaXJlYmFzZS5pbml0KHtcbiAgICAgICAgb25QdXNoVG9rZW5SZWNlaXZlZENhbGxiYWNrOiB0b2tlbiA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZpcmViYXNlIHB1c2ggdG9rZW46IFwiICsgdG9rZW4pO1xuICAgICAgICB9LFxuICAgICAgICBvbk1lc3NhZ2VSZWNlaXZlZENhbGxiYWNrOiAobWVzc2FnZTogZmlyZWJhc2UuTWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCItLS0gbWVzc2FnZSByZWNlaXZlZDogXCIgKyBKU09OLnN0cmluZ2lmeShtZXNzYWdlKSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBhbGVydCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAobWVzc2FnZS50aXRsZSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS50aXRsZSA6IFwiXCIpLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAobWVzc2FnZS5ib2R5ICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLmJvZHkgOiBcIlwiKSxcbiAgICAgICAgICAgICAgICAgICAgb2tCdXR0b25UZXh0OiBcIk9rYXlcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgfX0pLnRoZW4oXG4gICAgICAgIChpbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJmaXJlYmFzZS5pbml0IGRvbmVcIik7XG4gICAgfSxcbiAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImZpcmViYXNlLmluaXQgZXJyb3I6IFwiICsgZXJyb3IpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb3BlbkRyYXdlcigpIHtcbiAgICBsZXQgZHJhd2VyOiBSYWRTaWRlRHJhd2VyID0gPFJhZFNpZGVEcmF3ZXI+KHRvcG1vc3QoKS5nZXRWaWV3QnlJZChcInNldHRpbmdzLW1lbnVcIikpO1xuICAgIGRyYXdlci5nZXN0dXJlc0VuYWJsZWQgPSB0cnVlO1xuICAgIGRyYXdlci5zaG93RHJhd2VyKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3ZXJDbG9zZWQoYXJncykge1xuICAgIHZhciBkcmF3ZXIgPSBhcmdzLm9iamVjdDtcbiAgICBkcmF3ZXIuZ2VzdHVyZXNFbmFibGVkID0gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3ZXJMb2FkZWQoYXJncykge1xuXHR2YXIgZHJhd2VyID0gYXJncy5vYmplY3Q7XG4gICAgZHJhd2VyLmdlc3R1cmVzRW5hYmxlZCA9IGZhbHNlO1xuXHRpZiAoIWRyYXdlci5hdXRvQ2xvc2VBc3NpZ25lZCkge1xuXHRcdGRyYXdlci5hdXRvQ2xvc2VBc3NpZ25lZCA9IHRydWU7XG5cdFx0ZHJhd2VyLnBhZ2Uub24oXCJuYXZpZ2F0ZWRGcm9tXCIsIChhcmdzKSA9PiB7XG5cdFx0XHRkcmF3ZXIuY2xvc2VEcmF3ZXIoKTtcblx0XHR9KTtcblx0XHRcblx0XHRpZiAoZHJhd2VyLmlvcykge1xuXHRcdFx0ZHJhd2VyLmlvcy5kZWZhdWx0U2lkZURyYXdlci5zdHlsZS5zaGFkb3dNb2RlID0gMlxuXHRcdFx0ZHJhd2VyLmlvcy5kZWZhdWx0U2lkZURyYXdlci5zdHlsZS5kaW1PcGFjaXR5ID0gMC4xMjtcbiAgICAgICAgICAgIGRyYXdlci5pb3MuZGVmYXVsdFNpZGVEcmF3ZXIuc3R5bGUuc2hhZG93T3BhY2l0eSA9IDAuNzU7XG4gICAgICAgICAgICBkcmF3ZXIuaW9zLmRlZmF1bHRTaWRlRHJhd2VyLnN0eWxlLnNoYWRvd1JhZGl1cyA9IDU7XG4gICAgICAgICAgICBkcmF3ZXIuaW9zLmRlZmF1bHRTaWRlRHJhd2VyLnRyYW5zaXRpb25EdXJhdGlvbiA9IDAuMjU7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY2hvb2xzVGFwKCkge1xuICAgIHZhciBuYXZpZ2F0aW9uRW50cnkgPSB7XG4gICAgICAgIG1vZHVsZU5hbWU6IFwidmlld3Mvc2Nob29scy9zY2hvb2xzXCIsXG4gICAgICAgIGNvbnRleHQ6IHsgc2V0dGluZ3M6IHRydWUgfSxcbiAgICAgICAgYW5pbWF0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgICB0b3Btb3N0KCkubmF2aWdhdGUobmF2aWdhdGlvbkVudHJ5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbGVyZ2Vuc1RhcCgpIHtcbiAgICB2YXIgbmF2aWdhdGlvbkVudHJ5ID0ge1xuICAgICAgICBtb2R1bGVOYW1lOiBcInZpZXdzL2FsbGVyZ2Vucy9hbGxlcmdlbnNcIixcbiAgICAgICAgY29udGV4dDogeyBzZXR0aW5nczogdHJ1ZSB9LFxuICAgICAgICBhbmltYXRlZDogZmFsc2VcbiAgICB9O1xuICAgIHRvcG1vc3QoKS5uYXZpZ2F0ZShuYXZpZ2F0aW9uRW50cnkpO1xufSJdfQ==