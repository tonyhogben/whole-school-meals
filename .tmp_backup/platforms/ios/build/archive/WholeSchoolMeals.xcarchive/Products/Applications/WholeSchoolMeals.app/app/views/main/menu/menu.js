"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var frame_1 = require("ui/frame");
var moment = require("moment");
var TimeDatePicker = require("nativescript-timedatepicker");
var menu_vm_1 = require("../../../view-models/menu-vm");
var menu = new menu_vm_1.Menu;
var viewData = observable_1.fromObject({
    date: new Date(),
    displayDate: "Today",
    menu: menu,
    isLoading: true,
    menuError: ""
});
function onViewLoaded(args) {
    var view = args.object;
    view.bindingContext = viewData;
    // Set the start date - make sure it is not the weekend, if so, go to Monday
    if (!viewData.get("date")) {
        updateDay(new Date());
    }
    else {
        updateDay(viewData.get("date"));
    }
}
exports.onViewLoaded = onViewLoaded;
function pickDay(args) {
    //Create a callback function
    var callback = (function (date) {
        if (date) {
            var newDate = moment(date, "DD MM YYYY hh:mm").toDate();
            ;
            updateDay(newDate);
        }
    });
    //Initialize the PickerManager (.init(yourCallback, title, initialDate))
    TimeDatePicker.init(callback, null, viewData.get("date"));
    //Show the dialog
    TimeDatePicker.showDatePickerDialog();
}
exports.pickDay = pickDay;
function prevDay() {
    var theDay = viewData.get("date");
    theDay.setDate(theDay.getDate() - 1);
    if (moment(theDay).weekday() == 0) {
        theDay.setDate(theDay.getDate() - 2);
    }
    updateDay(theDay);
}
exports.prevDay = prevDay;
function nextDay() {
    var theDay = viewData.get("date");
    theDay.setDate(theDay.getDate() + 1);
    if (moment(theDay).weekday() == 6) {
        theDay.setDate(theDay.getDate() + 2);
    }
    updateDay(theDay);
}
exports.nextDay = nextDay;
function updateDay(date) {
    viewData.set("isLoading", true);
    if (moment(date).weekday() == 6) {
        //Saturday
        date.setDate(date.getDate() + 2);
    }
    else if (moment(date).weekday() == 0) {
        //Sunday
        date.setDate(date.getDate() + 1);
    }
    viewData.set("date", date);
    viewData.set("displayDate", displayDate(date));
    // Load menu for selected day
    menu.load(moment(date).format("DD/MM/YYYY"))
        .then(function () {
        viewData.set("menuError", "");
        viewData.set("isLoading", false);
    }).catch(function (error) {
        var strError;
        if (error.toString().includes("555")) {
            strError = "There is no menu information available for this day yet, please try again later.";
        }
        else if (error.toString().includes("offline")) {
            strError = "You do not appear to have an Internet Connection, please try again when you are connected.";
        }
        else {
            strError = "We appear to be having trouble getting the menu information for this day at the moment, please try again later.";
        }
        viewData.set("menuError", strError);
        viewData.set("isLoading", false);
    });
}
function displayDate(date) {
    return (moment(date).calendar(null, { sameElse: 'DD/MM/YYYY' }).split(" at"))[0];
}
function goMain1() {
    goToDish(menu.main1);
}
exports.goMain1 = goMain1;
function goMain2() {
    goToDish(menu.main2);
}
exports.goMain2 = goMain2;
function goToDish(Dish) {
    frame_1.topmost().navigate({
        moduleName: "views/dish/dish",
        context: Dish
    });
}
//# sourceMappingURL=data:application/json;base64,