"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var models_1 = require("../shared/models");
var allergens_vm_1 = require("../view-models/allergens-vm");
var couchbase = require("nativescript-couchbase");
var allergenList = new allergens_vm_1.AllergenList;
var Menu = (function (_super) {
    __extends(Menu, _super);
    function Menu() {
        return _super.call(this) || this;
    }
    Menu.prototype.load = function (date) {
        var _this = this;
        return fetch(models_1.Config.apiUrl + "menu.ashx?d=" + date)
            .then(handleErrors)
            .then(function (response) {
            return response.json();
        }).then(function (data) {
            _this.handleData(data);
            // Add to local db
            var database = new couchbase.Couchbase("wsm");
            var menu = database.getDocument(date);
            if (!menu) {
                database.createDocument(data, date);
            }
            else {
                database.updateDocument(date, data);
            }
        })
            .catch(function (error) {
            _this.checkDatabase(date, error);
        });
    };
    Menu.prototype.checkDatabase = function (date, error) {
        var database = new couchbase.Couchbase("wsm");
        var menu = database.getDocument(date);
        if (!menu) {
            throw Error(error);
        }
        else {
            this.handleData(menu);
        }
    };
    Menu.prototype.handleData = function (data) {
        if (data) {
            this.set("menuDate", data.MenuDate);
            this.set("calendarId", data.CalendarID);
            this.set("main1", this.makeDish(data.Main1, data.CalendarID, data.MenuDate));
            this.set("main2", this.makeDish(data.Main2, data.CalendarID, data.MenuDate));
            this.set("side1", this.makeDish(data.Side1, data.CalendarID, data.MenuDate));
            this.set("side2", this.makeDish(data.Side2, data.CalendarID, data.MenuDate));
            this.set("side3", this.makeDish(data.Side3, data.CalendarID, data.MenuDate));
            this.set("side4", this.makeDish(data.Side4, data.CalendarID, data.MenuDate));
            this.set("side5", this.makeDish(data.Side5, data.CalendarID, data.MenuDate));
            this.set("dessert1", this.makeDish(data.Dessert1, data.CalendarID, data.MenuDate));
            this.set("dessert2", this.makeDish(data.Dessert2, data.CalendarID, data.MenuDate));
            this.set("dessert3", this.makeDish(data.Dessert3, data.CalendarID, data.MenuDate));
            this.set("dessert4", this.makeDish(data.Dessert4, data.CalendarID, data.MenuDate));
        }
    };
    Menu.prototype.makeDish = function (jsonObj, calendarId, menuDate) {
        if (jsonObj) {
            // Setup dish object
            var dish_1 = {
                id: jsonObj.DishID,
                calendarId: calendarId,
                menuDate: menuDate,
                name: jsonObj.Name,
                description: jsonObj.Description,
                description_html: "</style><div style=\"font-family: Arial, Helvetica, sans-serif;\">" + jsonObj.DescriptionHTML + "</div>",
                vegetarian: jsonObj.Vegetarian,
                ingredients: [],
                allergens: [],
                hasYourAllergens: false,
                yourAllergenCount: 0,
                yourAllergenMessage: "",
                hasGallery: false,
                photos: []
            };
            // Ingredients
            var ingredientStr_1 = [];
            jsonObj.Ingredients.forEach(function (ingredient) {
                var ing = {
                    id: ingredient.IngredientID,
                    name: ingredient.Ingredient,
                    vegetarian: ingredient.Vegetarian,
                    measurementId: ingredient.MeasurementID,
                    heading: ingredient.Heading,
                    allergens: [],
                };
                var allergensStr = [];
                if (ingredient.Allergens) {
                    ingredient.Allergens.forEach(function (allergen) {
                        if (!allergen.Deleted) {
                            ing.allergens.push({
                                id: allergen.AllergenID,
                                name: allergen.Allergen
                            });
                            allergensStr.push(allergen.Allergen);
                        }
                    });
                }
                if (!ingredient.Heading) {
                    if (allergensStr.length > 0) {
                        ingredientStr_1.push(ingredient.Ingredient + " (" + allergensStr.toString() + ")");
                    }
                    else {
                        ingredientStr_1.push(ingredient.Ingredient);
                    }
                }
                dish_1.ingredients.push(ing);
            });
            dish_1.ingredientList = ingredientStr_1.join(', ');
            // Allergens
            var allergensStr_1 = [];
            var yourAllergensStr_1 = [];
            jsonObj.Allergens.forEach(function (allergen) {
                if (!allergen.Deleted) {
                    dish_1.allergens.push({
                        id: allergen.AllergenID,
                        name: allergen.Allergen
                    });
                    allergensStr_1.push(allergen.Allergen);
                    if (allergenList.myAllergens.includes(allergen.AllergenID)) {
                        yourAllergensStr_1.push(allergen.Allergen);
                    }
                }
            });
            dish_1.allergenList = allergensStr_1.join(', ');
            // Has your allergens?
            if (yourAllergensStr_1.length > 0) {
                dish_1.yourAllergens = yourAllergensStr_1.join(', ');
                dish_1.hasYourAllergens = true;
                dish_1.yourAllergenCount = yourAllergensStr_1.length;
                dish_1.yourAllergenMessage = dish_1.name + " contains " + dish_1.yourAllergenCount + " of your allergens";
            }
            // Photos
            jsonObj.Photos.forEach(function (photo, index) {
                if (index == 0) {
                    dish_1.photo = photo.URL;
                }
                dish_1.photos.push({
                    url: photo.URL,
                    caption: photo.Caption
                });
            });
            if (!dish_1.photo) {
                dish_1.photo = "~/images/" + models_1.Config.noImagePaths[Math.floor(Math.random() * models_1.Config.noImagePaths.length)];
            }
            if (dish_1.photos.length > 1) {
                dish_1.hasGallery = true;
            }
            // Return the dish
            return dish_1;
        }
        else {
            return {
                id: 0,
                calendarId: 0,
                menuDate: new Date(),
                name: '',
                description: '',
                description_html: '',
                vegetarian: false,
                hasYourAllergens: false,
                yourAllergenCount: 0,
                yourAllergenMessage: "",
                photo: ""
            };
        }
    };
    return Menu;
}(observable_1.Observable));
exports.Menu = Menu;
function handleErrors(response) {
    if (!response.ok) {
        throw Error(response.status);
    }
    return response;
}
//# sourceMappingURL=data:application/json;base64,