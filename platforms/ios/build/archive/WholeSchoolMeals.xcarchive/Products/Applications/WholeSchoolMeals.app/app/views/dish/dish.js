"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var models_1 = require("../../shared/models");
var platform_1 = require("tns-core-modules/platform");
var frame_1 = require("ui/frame");
var timer_1 = require("timer");
var moment = require("moment");
var dish, page;
function onLoaded(args) {
    page = args.object;
    dish = page.navigationContext;
    page.bindingContext = dish;
    // get the menu date and see if we should show the feedback panel
    var feedbackPanel = (page.getViewById("feedbackPanel"));
    if (moment(dish.menuDate).isSame(moment(), 'day')) {
        if (moment(moment()).isAfter(moment('13:00', 'hh:mm'))) {
            // They have had lunch - show
            feedbackPanel.visibility = "visible";
        }
        else {
            // They have not had lunch yet - hide
            feedbackPanel.visibility = "collapse";
        }
    }
    else if (moment(dish.menuDate).isBefore(moment())) {
        // In the past - show
        feedbackPanel.visibility = "visible";
    }
    else {
        // In the future - hide
        feedbackPanel.visibility = "collapse";
    }
}
exports.onLoaded = onLoaded;
function back() {
    frame_1.goBack();
}
exports.back = back;
function showImage(args) {
    var tappedView = args.view, tappedItem = tappedView.bindingContext, mainPhoto = (page.getViewById("mainPhoto"));
    mainPhoto.src = tappedItem.url;
}
exports.showImage = showImage;
function fbYes() {
    sendFeedback(true);
}
exports.fbYes = fbYes;
function fbNo() {
    sendFeedback(false);
}
exports.fbNo = fbNo;
function sendFeedback(Feedback) {
    // Get the buttons by ID and set their isUserInteractionEnabled="false" so they cannot be double clicked
    var feedbackLabel = (page.getViewById("feedbackLabel")), feedbackBtnYes = (page.getViewById("feedbackBtnYes")), feedbackBtnNo = (page.getViewById("feedbackBtnNo"));
    feedbackBtnYes.isUserInteractionEnabled = false;
    feedbackBtnNo.isUserInteractionEnabled = false;
    feedbackBtnYes.className = "fa loading";
    feedbackBtnNo.className = "fa loading";
    // Change label to read "Sending your feedback" and add an activity indicator
    feedbackLabel.text = "Sending your feedback";
    // Once complete, hide the buttons (and the bottom label) and change the main label to read "Thank you, your feedback has been sent"
    var id = timer_1.setTimeout(function () {
        fetch(models_1.Config.apiUrl + "feedback.ashx", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                DishID: dish.id,
                CalendarID: dish.calendarId,
                Feedback: Feedback ? 1 : 0,
                IPAddress: '',
                UserAgent: platform_1.device.model + ', ' + platform_1.device.deviceType + ', ' + platform_1.device.os + ', ' + platform_1.device.osVersion + ', ' + platform_1.device.sdkVersion,
                DeviceID: platform_1.device.uuid
            })
        }).then(handleErrors)
            .then(function (response) {
            //console.dir(response);
            return response.json();
        }).then(function (response) {
            var id = timer_1.setTimeout(function () {
                feedbackLabel.text = "Thank you, your feedback has been sent";
                var id = timer_1.setTimeout(function () {
                    // Re-enable the buttons and change the message again
                    feedbackLabel.text = "Did another child enjoy this dish?";
                    feedbackBtnYes.isUserInteractionEnabled = true;
                    feedbackBtnNo.isUserInteractionEnabled = true;
                    feedbackBtnYes.className = "fa";
                    feedbackBtnNo.className = "fa";
                }, 1500);
            }, 1000);
        }).catch(function () {
            feedbackLabel.text = "Did your child enjoy this dish?";
            feedbackBtnYes.isUserInteractionEnabled = true;
            feedbackBtnNo.isUserInteractionEnabled = true;
            feedbackBtnYes.className = "fa";
            feedbackBtnNo.className = "fa";
            alert("Something has gone wrong. Please make sure you have an internet connection and try again.");
        });
    }, 1000);
}
function handleErrors(response) {
    if (!response.ok) {
        console.log(JSON.stringify(response));
        throw Error(response.statusText);
    }
    return response;
}
//# sourceMappingURL=data:application/json;base64,