"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var frame_1 = require("ui/frame");
var moment = require("moment");
var TimeDatePicker = require("nativescript-timedatepicker");
var menu_vm_1 = require("../../../view-models/menu-vm");
var view, menu = new menu_vm_1.Menu, viewData = observable_1.fromObject({
    date: new Date(),
    displayDate: "Today",
    menu: menu,
    isLoading: true,
    menuError: ""
});
function onViewLoaded(args) {
    view = args.object;
    view.bindingContext = viewData;
    // Set the start date - make sure it is not the weekend, if so, go to Monday
    if (!viewData.get("date")) {
        updateDay(new Date());
    }
    else {
        updateDay(viewData.get("date"));
    }
    //const menuWrapper = <StackLayout>view.getViewById("menuWrapper");
    //menuWrapper.on(GestureTypes.swipe, (args: SwipeGestureEventData) => {
    //    if (args.direction === SwipeDirection.left) {
    //        nextDay();
    //    } else if (args.direction === SwipeDirection.right) {
    //        prevDay();
    //    }
    //});
}
exports.onViewLoaded = onViewLoaded;
function pickDay(args) {
    //Create a callback function
    var callback = (function (date) {
        if (date) {
            var newDate = moment(date, "DD MM YYYY hh:mm").toDate();
            ;
            updateDay(newDate);
        }
    });
    //Initialize the PickerManager (.init(yourCallback, title, initialDate))
    TimeDatePicker.init(callback, null, viewData.get("date"));
    //Show the dialog
    TimeDatePicker.showDatePickerDialog();
}
exports.pickDay = pickDay;
function prevDay() {
    var theDay = viewData.get("date");
    theDay.setDate(theDay.getDate() - 1);
    if (moment(theDay).weekday() == 0) {
        theDay.setDate(theDay.getDate() - 2);
    }
    updateDay(theDay);
}
exports.prevDay = prevDay;
function nextDay() {
    var theDay = viewData.get("date");
    theDay.setDate(theDay.getDate() + 1);
    if (moment(theDay).weekday() == 6) {
        theDay.setDate(theDay.getDate() + 2);
    }
    updateDay(theDay);
}
exports.nextDay = nextDay;
function updateDay(date) {
    var menuWrap = view.getViewById("menuWrap");
    menuWrap.animate({
        opacity: 0,
        duration: 200
    });
    viewData.set("isLoading", true);
    if (moment(date).weekday() == 6) {
        //Saturday
        date.setDate(date.getDate() + 2);
    }
    else if (moment(date).weekday() == 0) {
        //Sunday
        date.setDate(date.getDate() + 1);
    }
    viewData.set("date", date);
    viewData.set("displayDate", displayDate(date));
    // Load menu for selected day
    menu.load(moment(date).format("DD/MM/YYYY"))
        .then(function () {
        viewData.set("menuError", "");
        viewData.set("isLoading", false);
        menuWrap.animate({
            opacity: 1,
            duration: 500
        });
    }).catch(function (error) {
        var strError;
        if (error.toString().includes("555")) {
            strError = "There is no menu information available for this day yet, please try again later.";
        }
        else if (error.toString().includes("offline")) {
            strError = "You do not appear to have an Internet Connection, please try again when you are connected.";
        }
        else {
            strError = "We appear to be having trouble getting the menu information for this day at the moment, please try again later.";
        }
        viewData.set("menuError", strError);
        viewData.set("isLoading", false);
    });
}
function displayDate(date) {
    return (moment(date).calendar(null, { sameElse: 'DD/MM/YYYY' }).split(" at"))[0];
}
function goMain1() {
    goToDish(menu.main1);
}
exports.goMain1 = goMain1;
function goMain2() {
    goToDish(menu.main2);
}
exports.goMain2 = goMain2;
function goSide1() {
    goToDish(menu.side1);
}
exports.goSide1 = goSide1;
function goSide2() {
    goToDish(menu.side2);
}
exports.goSide2 = goSide2;
function goSide3() {
    goToDish(menu.side3);
}
exports.goSide3 = goSide3;
function goSide4() {
    goToDish(menu.side4);
}
exports.goSide4 = goSide4;
function goSide5() {
    goToDish(menu.side5);
}
exports.goSide5 = goSide5;
function goDessert1() {
    goToDish(menu.dessert1);
}
exports.goDessert1 = goDessert1;
function goDessert2() {
    goToDish(menu.dessert2);
}
exports.goDessert2 = goDessert2;
function goDessert3() {
    goToDish(menu.dessert3);
}
exports.goDessert3 = goDessert3;
function goDessert4() {
    goToDish(menu.dessert4);
}
exports.goDessert4 = goDessert4;
function goToDish(Dish) {
    frame_1.topmost().navigate({
        moduleName: "views/dish/dish",
        context: Dish
    });
}
//# sourceMappingURL=data:application/json;base64,