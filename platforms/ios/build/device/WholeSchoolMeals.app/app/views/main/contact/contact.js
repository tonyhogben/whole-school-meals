"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var models_1 = require("../../../shared/models");
var email_validator_1 = require("email-validator");
var viewData = observable_1.fromObject({
    name: "",
    phone: "",
    email: "",
    message: "",
    isLoading: false
});
function onViewLoaded(args) {
    var view = args.object;
    view.bindingContext = viewData;
}
exports.onViewLoaded = onViewLoaded;
function sendMessage() {
    if (!viewData.get("message")) {
        alert("You need to enter a message!");
        return;
    }
    if (viewData.get("email")) {
        if (!email_validator_1.validate(viewData.get("email"))) {
            alert("Please check you have entered a valid email address!");
            return;
        }
    }
    viewData.set("isLoading", true);
    fetch(models_1.Config.apiUrl + "contact.ashx", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            Name: viewData.get("name") ? viewData.get("name") : '',
            Phone: viewData.get("phone") ? viewData.get("phone") : '',
            Email: viewData.get("email") ? viewData.get("email") : '',
            Message: viewData.get("message")
        })
    }).then(handleErrors)
        .then(function (response) {
        return response.json();
    }).then(function (response) {
        viewData.set("name", "");
        viewData.set("phone", "");
        viewData.set("email", "");
        viewData.set("message", "");
        viewData.set("isLoading", false);
        alert("Thank you. Your message has been sent.");
    }).catch(function () {
        viewData.set("isLoading", false);
        alert("Something has gone wrong. Please make sure you have an internet connection and try again.");
    });
}
exports.sendMessage = sendMessage;
function handleErrors(response) {
    if (!response.ok) {
        console.log(JSON.stringify(response));
        throw Error(response.statusText);
    }
    return response;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbnRhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw4Q0FBd0Y7QUFDeEYsaURBQWdEO0FBQ2hELG1EQUEyQztBQUUzQyxJQUFJLFFBQVEsR0FBZSx1QkFBVSxDQUFDO0lBQ2xDLElBQUksRUFBRSxFQUFFO0lBQ1IsS0FBSyxFQUFFLEVBQUU7SUFDVCxLQUFLLEVBQUUsRUFBRTtJQUNULE9BQU8sRUFBRSxFQUFFO0lBQ1gsU0FBUyxFQUFFLEtBQUs7Q0FDbkIsQ0FBQyxDQUFDO0FBRUgsc0JBQTZCLElBQWU7SUFDeEMsSUFBTSxJQUFJLEdBQWdCLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdEMsSUFBSSxDQUFDLGNBQWMsR0FBQyxRQUFRLENBQUM7QUFDakMsQ0FBQztBQUhELG9DQUdDO0FBRUQ7SUFDSSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQztJQUNYLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixFQUFFLENBQUMsQ0FBQyxDQUFDLDBCQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQyxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztZQUM5RCxNQUFNLENBQUM7UUFDWCxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRWhDLEtBQUssQ0FBQyxlQUFNLENBQUMsTUFBTSxHQUFHLGNBQWMsRUFBRTtRQUM5QixNQUFNLEVBQUUsTUFBTTtRQUNkLE9BQU8sRUFBRSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRTtRQUMvQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNqQixJQUFJLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDdEQsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFO1lBQ3pELEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRTtZQUN6RCxPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7U0FDbkMsQ0FBQztLQUNMLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQ3BCLElBQUksQ0FBQyxVQUFTLFFBQVE7UUFDbkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxRQUFRO1FBQ1osUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDekIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFakMsS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ0wsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakMsS0FBSyxDQUFDLDJGQUEyRixDQUFDLENBQUM7SUFDdkcsQ0FBQyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBdkNELGtDQXVDQztBQUVELHNCQUFzQixRQUFRO0lBQzFCLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN0QyxNQUFNLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUNELE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDcEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrTGF5b3V0IH0gZnJvbSBcInVpL2xheW91dHMvc3RhY2stbGF5b3V0XCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBFdmVudERhdGEsIGZyb21PYmplY3QsIFByb3BlcnR5Q2hhbmdlRGF0YSB9IGZyb20gXCJkYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9tb2RlbHMnO1xuaW1wb3J0IHsgdmFsaWRhdGUgfSBmcm9tIFwiZW1haWwtdmFsaWRhdG9yXCI7XG5cbnZhciB2aWV3RGF0YTogT2JzZXJ2YWJsZSA9IGZyb21PYmplY3Qoe1xuICAgIG5hbWU6IFwiXCIsXG4gICAgcGhvbmU6IFwiXCIsXG4gICAgZW1haWw6IFwiXCIsXG4gICAgbWVzc2FnZTogXCJcIixcbiAgICBpc0xvYWRpbmc6IGZhbHNlXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uVmlld0xvYWRlZChhcmdzOiBFdmVudERhdGEpIHtcbiAgICBjb25zdCB2aWV3ID0gPFN0YWNrTGF5b3V0PmFyZ3Mub2JqZWN0O1xuICAgIHZpZXcuYmluZGluZ0NvbnRleHQ9dmlld0RhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZW5kTWVzc2FnZSgpIHsgICBcbiAgICBpZiAoIXZpZXdEYXRhLmdldChcIm1lc3NhZ2VcIikpIHtcbiAgICAgICAgYWxlcnQoXCJZb3UgbmVlZCB0byBlbnRlciBhIG1lc3NhZ2UhXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHZpZXdEYXRhLmdldChcImVtYWlsXCIpKSB7XG4gICAgICAgIGlmICghdmFsaWRhdGUodmlld0RhdGEuZ2V0KFwiZW1haWxcIikpKSB7XG4gICAgICAgICAgICBhbGVydChcIlBsZWFzZSBjaGVjayB5b3UgaGF2ZSBlbnRlcmVkIGEgdmFsaWQgZW1haWwgYWRkcmVzcyFcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2aWV3RGF0YS5zZXQoXCJpc0xvYWRpbmdcIiwgdHJ1ZSk7XG5cbiAgICBmZXRjaChDb25maWcuYXBpVXJsICsgXCJjb250YWN0LmFzaHhcIiwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgXG4gICAgICAgICAgICAgICAgTmFtZTogdmlld0RhdGEuZ2V0KFwibmFtZVwiKSA/IHZpZXdEYXRhLmdldChcIm5hbWVcIikgOiAnJywgXG4gICAgICAgICAgICAgICAgUGhvbmU6IHZpZXdEYXRhLmdldChcInBob25lXCIpID8gdmlld0RhdGEuZ2V0KFwicGhvbmVcIikgOiAnJyxcbiAgICAgICAgICAgICAgICBFbWFpbDogdmlld0RhdGEuZ2V0KFwiZW1haWxcIikgPyB2aWV3RGF0YS5nZXQoXCJlbWFpbFwiKSA6ICcnLFxuICAgICAgICAgICAgICAgIE1lc3NhZ2U6IHZpZXdEYXRhLmdldChcIm1lc3NhZ2VcIilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pLnRoZW4oaGFuZGxlRXJyb3JzKVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgfSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICB2aWV3RGF0YS5zZXQoXCJuYW1lXCIsIFwiXCIpO1xuICAgICAgICAgICAgdmlld0RhdGEuc2V0KFwicGhvbmVcIiwgXCJcIik7XG4gICAgICAgICAgICB2aWV3RGF0YS5zZXQoXCJlbWFpbFwiLCBcIlwiKTtcbiAgICAgICAgICAgIHZpZXdEYXRhLnNldChcIm1lc3NhZ2VcIiwgXCJcIik7XG4gICAgICAgICAgICB2aWV3RGF0YS5zZXQoXCJpc0xvYWRpbmdcIiwgZmFsc2UpO1xuXG4gICAgICAgICAgICBhbGVydChcIlRoYW5rIHlvdS4gWW91ciBtZXNzYWdlIGhhcyBiZWVuIHNlbnQuXCIpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZpZXdEYXRhLnNldChcImlzTG9hZGluZ1wiLCBmYWxzZSk7XG4gICAgICAgICAgICBhbGVydChcIlNvbWV0aGluZyBoYXMgZ29uZSB3cm9uZy4gUGxlYXNlIG1ha2Ugc3VyZSB5b3UgaGF2ZSBhbiBpbnRlcm5ldCBjb25uZWN0aW9uIGFuZCB0cnkgYWdhaW4uXCIpO1xuICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3JzKHJlc3BvbnNlKSB7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXNwb25zZSkpO1xuICAgICAgICB0aHJvdyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufSJdfQ==